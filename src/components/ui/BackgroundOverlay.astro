---
/**
 * @prop {ImageMetadata | string} [image] - Imagem de fundo (ImageMetadata ou URL)
 * @prop {string} [color] - Cor do overlay em hex (ex: #0D8B3D)
 * @prop {number} [opacity=60] - Opacidade do overlay (0-100)
 * @prop {'multiply' | 'overlay' | 'screen' | 'darken' | 'lighten' | 'none'} [blendMode='none'] - Modo de mistura CSS
 * @prop {string} [class] - Classes Tailwind adicionais para o container
 * @prop {string} [contentClass] - Classes Tailwind adicionais para o conteúdo
 */

import Image from '@/components/common/Image.astro';
import type { BackgroundOverlayProps } from '@/types';
import { twMerge } from 'tailwind-merge';

type Props = BackgroundOverlayProps;

const {
  image,
  color = null,
  opacity = 60,
  blendMode = 'none',
  class: className = '',
  contentClass = '',
} = Astro.props;

const blendModeClass = {
  multiply: 'mix-blend-multiply',
  overlay: 'mix-blend-overlay',
  screen: 'mix-blend-screen',
  darken: 'mix-blend-darken',
  lighten: 'mix-blend-lighten',
  none: '',
}[blendMode];

// Usar style inline para cores hex dinâmicas (solução do problema do Tailwind)
const overlayStyle = color
  ? { backgroundColor: color, opacity: opacity / 100 }
  : { opacity: opacity / 100 };

const overlayBgClass = !color ? 'bg-caju-heading-primary' : '';
---

<div class={twMerge('relative overflow-hidden', className)}>
  <!-- Imagem de fundo -->
  {
    image && (
      <div class="absolute inset-0">
        {typeof image === 'string' ? (
          <img
            src={image}
            alt="Background"
            class="h-full w-full object-cover"
          />
        ) : (
          <Image
            src={image}
            alt="Background"
            class="h-full w-full object-cover"
            widths={[400, 768, 1024]}
            sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, 1024px"
          />
        )}
      </div>
    )
  }

  <!-- Overlay de cor -->
  <div
    class={twMerge('absolute inset-0', overlayBgClass, blendModeClass)}
    style={overlayStyle}
  >
  </div>

  <!-- Conteúdo -->
  <div class={twMerge('relative z-100 w-full h-full flex justify-center items-center py-4', contentClass)}>
    <slot />
  </div>
</div>
