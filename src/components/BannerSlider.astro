---
import { getCollection } from 'astro:content';
import type { ImageMetadata } from 'astro';
import Image from './common/Image.astro';

interface CTAButton {
  text: string;
  url: string;
  variant: 'primary' | 'secondary' | 'outline';
}

interface BannerData {
  title: string;
  subtitle?: string;
  description?: string;
  image: ImageMetadata;
  imageMobile?: ImageMetadata;
  cta?: CTAButton;
  textPosition: 'left' | 'center' | 'right';
  textAlign: 'top' | 'middle' | 'bottom';
  overlay: boolean;
  order: number;
  active: boolean;
  publishDate?: Date;
  expireDate?: Date;
}

interface Banner {
  data: BannerData;
  id: string;
}

const now = new Date();
const allBanners = await getCollection('banner') as Banner[];

const banners = allBanners
  .filter((banner): banner is Banner => {
    if (!banner.data.active) return false;
    if (banner.data.publishDate && banner.data.publishDate > now) return false;
    if (banner.data.expireDate && banner.data.expireDate < now) return false;
    return true;
  })
  .sort((a, b) => a.data.order - b.data.order);

const hasBanners = banners.length > 0;

const positionClasses: Record<BannerData['textPosition'], string> = {
  left: 'text-left items-start',
  center: 'text-center items-center',
  right: 'text-right items-end'
};

const alignClasses: Record<BannerData['textAlign'], string> = {
  top: 'justify-start pt-20',
  middle: 'justify-center',
  bottom: 'justify-end pb-20'
};

const ctaClasses: Record<CTAButton['variant'], string> = {
  primary: 'bg-white text-gray-900 hover:bg-gray-100',
  secondary: 'bg-blue-600 text-white hover:bg-blue-700',
  outline: 'border-2 border-white text-white hover:bg-white hover:text-gray-900'
};
---

{hasBanners && (
  <div class="relative w-full h-[341px] md:h-[700px] overflow-hidden banner-swiper">
    <div class="swiper size-full">
      <div class="swiper-wrapper">
        {banners.map((banner, index) => {
          const { title, subtitle, description, image, imageMobile, cta, textPosition, textAlign, overlay } = banner.data;

          return (
            <div class="swiper-slide">
              <div class="relative size-full bg-gray-900">
                <!-- Background Image -->
                <picture>
                  {imageMobile && (
                    <source media="(max-width: 768px)" srcset={imageMobile.src} />
                  )}
                  <Image 
                    src={image}
                    alt={title}
                    class="absolute inset-0 size-full object-center object-cover"
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                </picture>
                
                <!-- Overlay -->
                {overlay && (
                  <div class="absolute inset-0 bg-[linear-gradient(to_bottom,rgb(0_0_0/0.3),rgb(0_0_0/0.6))]" />
                )}
                
                <!-- Content -->
                <div class={`relative size-full flex flex-col px-6 md:px-12 ${alignClasses[textAlign]}`}>
                  <div class={`max-w-7xl mx-auto w-full flex flex-col ${positionClasses[textPosition]}`}>
                    {subtitle && (
                      <p class="text-xl md:text-3xl text-white/90 mb-4">
                        {subtitle}
                      </p>
                    )}
                    
                    {description && (
                      <p class="text-base md:text-lg text-white/80 max-w-2xl mb-8">
                        {description}
                      </p>
                    )}
                    
                    {cta && (
                      <a 
                        href={cta.url}
                        class={`inline-block px-8 py-4 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg ${ctaClasses[cta.variant]}`}
                      >
                        {cta.text}
                      </a>
                    )}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
      
      {banners.length > 1 && (
        <>
          <!-- Pagination -->
          <div class="swiper-pagination bottom-1!"></div>
        </>
      )}
    </div>
  </div>
)}

<style>
  /* Swiper bullets customization */
  .banner-swiper :global(.swiper-pagination-bullet) {
    width: 12px;
    height: 12px;
    background: rgba(247, 164, 33, 0.6); /* #f7a421 */
    opacity: 1;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  
  .banner-swiper :global(.swiper-pagination-bullet-active) {
    width: 32px;
    border-radius: 6px;
    background: linear-gradient(135deg, #f7a421 0%, #ea5426 100%);
    box-shadow: 0 4px 12px rgba(234, 84, 38, 0.4);
  }
  
  .banner-swiper :global(.swiper-pagination-bullet:hover) {
    background: rgba(247, 164, 33, 0.9);
    transform: scale(1.1);
  }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

<script>
  import Swiper from 'swiper';
  import { Navigation, Pagination, Autoplay, Keyboard, EffectFade } from 'swiper/modules';

  function initBannerSwiper(): void {
    const swiperEl = document.querySelector<HTMLElement>('.banner-swiper .swiper');
    if (!swiperEl) return;

    new Swiper(swiperEl, {
      modules: [Navigation, Pagination, Autoplay, EffectFade],
      effect: 'fade',
      fadeEffect: {
        crossFade: true
      },
      speed: 700,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
        pauseOnMouseEnter: true,
      },
      pagination: {
        el: '.banner-swiper .swiper-pagination',
        clickable: true,
      },
    });
  }

  document.addEventListener('astro:page-load', initBannerSwiper);
</script>

<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>